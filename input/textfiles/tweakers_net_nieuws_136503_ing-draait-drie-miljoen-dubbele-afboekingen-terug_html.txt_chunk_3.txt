Omdat alles feitelijk al vaststaat (mapping is gedaan, analyse is gedaan), kan een klant niet zomaar zeggen; ik wil dat veldje niet in de XML, dus de klant staat van dit soort projecten een stuk verder weg. In deze gevallen kan het handiger/efficienter zijn om eea via waterval op te pakken (kostentechnisch, want bij scrum staat er van begin tot eind een heel team klaar van ontwikkelaars, testers, Functioneel ontwerpers, klant, etc, terwijl het bij de waterval methode steeds van schutting naar schutting gegooid wordt, dus tester hoeft pas ingezet te worden als ontwikkelaar klaar is, etc. Wat jou vraag betreft over leveren: Bij scrum maak je gebruik van kleine, overzichtelijke userstories. Dus: een klantvraag wordt opgeknipt in zo klein mogelijke eenheden die los ontwikkeld kunnen worden (en waar de klant ook nog iets mee kan). Aan het begin van een ontwikkelperiode (sprint), komt het hele team bij elkaar en worden de userstories besproken en ingeschat. Die inschatting wordt tegenover de userstories gezet en er wordt simpelweg ergens een streep getrokken (dit kunnen we volgens onze inschatting binnen deze sprint afkrijgen, de rest komt in de volgende sprint). In feite is iedere wijziging die de klant aangeeft, een nieuwe userstory. Zo kan het zijn dat userstory 1 is: ik wil wielen met spaken, waarna de klant zich bedenkt en dan als userstory 2 verzint dat ie toch sterwielen wil. Dat kan natuurlijk, maar dan wordt OF userstory 1 eerst gebouwd en daarna herbouwd naar userstory 2, OF userstory 1 vervalt, userstory 2 wordt door het team ingeschat en opnieuw geprioriteerd en dan past het wel/niet in de sprint (of er wordt binnen de sprint iets verschoven, waardoor een andere userstory met lagere prio naar de volgende sprint gaat). De kwaliteitseisen worden bij de userstory ingeschat en moet door de professionals (b.v. ontwikkelaars) in de gaten gehouden worden. Als b.v. een userstory inhoudt dat er een stuk software herschreven moet worden om het totaal aan de ontwikkelstandaarden te laten voldoen, dan hoort dat simpelweg bij die userstory en bij de inschatting. Als dat niet gebeurd, dan is de professional gewoonweg niet goed bezig. De kwaliteit zou dus, met een goed team, zeker gegarandeerd moeten zijn. • Mooie reactie, het klopt, het is niet overal geschikt voor. Ik denk ook, al iedereen hetzelfde erover denkt en tevreden over is, dan moet je vooral gaan scrummen. Websites, ja daar kan wat bij voorstellen. Het is altijd handig als je als ontwikkelaar kort op de gebruiker kan (mag!) zitten, hetzelfde geldt voor iedereen die technisch/inhoudelijk met elkaar te maken hebben op elkaar af kunnen stappen. Maar dat klinkt al meer als waar devops vandaan komt. Ken het hoor, heb je iemand nodig moet het via servicedesk en dan: heb je daar een ticket voor? • Ja idd, maar scrum heeft ook zijn valkuilen. Wat ik vaak zie gebeuren is dat er aan al ingeschatte en al bijna afgebouwde userstories gezeten wordt en er zelfs tijdens het testen van de userstories nog wijzigingen komen in de acceptatiecriteria van de klant. Eigenlijk zou dat niet mogelijk mogen zijn, want zoals aangegeven, zouden userstories, zodra ze zijn ingeschat en op de backlog staan, statisch moeten zijn (wijzigingen worden dan nieuwe userstories). Maar goed, kleinigheden daargelaten is het een heel fijne methode om mee te werken en kun je er heel efficiënt en klantvriendelijk software mee opleveren waar de klant ook 100 % achterstaat. • [Reactie gewijzigd door db_killer op 21 maart 2018 17:06] • Nee, joh, bij de ING gewerkt. En de ene dag weet je het, de andere dag wat minder. Soms moet je even denken, dat bedoel ik. Het enige wat ik zeg, is het wijs aan systemen die zo cruciaal zijn en die 24/7 foutloos moeten werken in korte cycli wijzigingen door te voeren. Iedere wijziging is een risico. De betrouwbaarheid en uptime horen ten allen tijde op 1 te staan. Niet de wens het proces naar de letter uit te voeren. • Het proces is inderdaad geen doel. Het doel is om functionaliteit toe te voegen om zo aan de wens van de klant te kunnen blijven voldoen en als bedrijf je marktpositie te handhaven. Software iedere twee weken of ieder half jaar opleveren zal geen invloed hebben op de hoeveelheid gewenste functionaliteit in bv. 1 jaar. Echter in een oplevering van twee weken zit minder functionaliteit verwerkt en als hier wat fout gaat is het eenvoudiger te repareren. Een oplevering die in een half jaar ontwikkeld is zal veel meer functionaliteit bevatten en daarom ook risicovoller zijn. De kans dat er iets mis gaat is aannemelijk en het corrigeren van fouten is lastig omdat er zoveel extra functionaliteit toegevoegd is. Als je vervolgens dus moet besluiten om de oplevering van een half jaar daarvoor terug te zetten, dan ben je al je nieuwe functionaliteit kwijt, terwijl 99% waarschijnlijk correct werkt. • Kan een eind met je meegaan, je zou ook kunnen zeggen, kort opleveringen betekent ook minder tijd om uitgebreid te testen. Als het fout gaat, is het misschien makkelijker terug te draaien. Kom ik toch weer op de agile/scrum, in korte sprints steeds nieuwe functionaliteit opleveren. Wordt dan niet de korte tijdspanne het doel in plaats dan maar iets langer en kwalitatief goed? Het is hoge druk ICT. Meer opleveringen kan ook meer verstoringen voor de gebruiker op leveren en dat is geen goede reclame. Lastig! • [Reactie gewijzigd door db_killer op 21 maart 2018 20:22] • Het is ook altijd de taak van de tester om uit te vogelen (eventueel samen met het team) waar de risico's zitten en daar meer testnadruk op te leggen (Risk based testing). Zo kan het bijvoorbeeld heel goed zijn dat als ik een oplevering test, dat ik maar 50 % daadwerkelijk bekijk en de andere 50 % niet, of nauwelijks bekijk. Als die 1e 50 % een hoop achterliggende functionaliteit raakt (of op een andere manier risico vormt, b.v. reputatieschade) en die 2e 50 % wat puntjes op de i zijn op b.v. een schermpje, dan wordt de nadruk echt op die 1e 50 % gelegd. Daarnaast kun je er nog van alles omheen bouwen natuurlijk. Als ik naar onze toko kijk, wij draaien regelmatig regressietesten op alle applicaties, doen health checks wanneer iets naar productie gaat, testen per project de nieuwe functionaliteit door, al dan niet op basis van Risk based testing (soms testen we ook gewoon alles, ongeacht het risico wat ingeschat is, dat gebeurt b.v. in samenspraak met de klant). Wat ook meespeelt, is hoe lang het (kan) duren voordat een bug gefixt is. Heb je maandelijkse opleveringen, dan kan een bug dus wat langer in de lucht zijn. Heb je een incidentenproces met eigen opleveringen, dan kan het mss binnen een dag of korter gefixt of in de lucht zijn. Ook dat hoort bij het risico-inschatten. • Toevallig werkzaam bij een gemeente of de Belastingdienst? Iets met...pom pom de dag komt wel om . 2 releases per jaar lijkt mij nooit een wenselijke situatie en is denk ik toch wat kortzichtig. Anno 2018 kun je niet meer op deze manier denken, grote wijzigingen in 1x doorvoeren betekent vaak ook dat de impact enorm is en hoe kijk je tegen de mitigatie van kwetsbaarheden? Ik verwacht van mijn bank(toevallig ING) dat, zodra een kwetsbaarheid bekend is, dat er asap een mitigatie plaats zal vinden. Ik heb liever incidenteel een storing en een veilige omgeving, dan een infrastructuur vol met kwetsbaarheden met 2 releasemomenten (lees: 2 mogelijke verstoringen) in het jaar. • Zijn er kwetsbaarheden of bugs en er zijn fixes nodig dan voer je die zo snel mogelijk door. Dat is iets anders dan nieuwe of andere functionaliteiten. Wat ik probeer te zeggen, iedere wijziging is een risico. Downtime en verstoringen, dat is echt het allerlaatste wat je wil lijkt me. • Continous Delivery maakt het daarintegen ook mogelijk om bij een probleem, snel een fix uit te rollen, zonder dat je en masse je eigen regels hoeft te breken en al je regressie trajecten te shortcutten, en fouten gebeuren er hoe dan ook, of je nu een heel star 6 maandelijkse release cycle hebt, of elk uur kan gaan. Overigens denk ik inderdaad niet dat het heel kort cyclische de handigste keus is voor de transactie systemen van een bank, maar daar zal dat ook minder worden ingezet gok ik zo (heb al een jaar of 7 niet meer bij een bank gezeten)  SCRUM/CI/CD zijn geen magic bullet, maar laten we vooral niet doen alsof old school monster waterval/releases lekker werkt, hoe vaak gaan dat soort projecten niet gruwelijk over hun budget/deadline heen, of worden ze helemaal opgegeven? • Inderdaad en daar komt bij dat het nog maar de vraag is of het een gevolg is van een nieuwe release. Ik heb er genoeg gezien waarbij processen stabiel draaien voor maanden en door een zeldzaam unieke combinatie van factoren in ene een ander resultaat geven zonder dat daar een new-release bug aan te pas kwam. • Dat ING in bepaalde departementen agile werkt betekent niet dat ze dat ook doen voor de kernsystemen (transacties). Volgens mij werkt ING vooral agile in de afdelingen die de mobiele apps en Mijn ING ontwikkelen, en die systemen hebben niks te maken met een transactie-batch die dubbel is uitgevoerd. Ik neem aan dat ING processen en checks heeft om de kwaliteit van het kernsysteem te waarborgen. • Ik zou niet weten waarom je voor zo'n kernsysteem niet agile zou werken. Er zijn hooguit zwaardere kwaliteits-eisen. • Agile is (kort door de bocht) bedacht om een korte cyclus te hebben van samen bedenken wat je gaat doen, implementeren wat je bedacht hebt, feedback verzamelen van gebruikers. Je kan zonder problemen agile toepassen op een kernsysteem, en misschien gebruikt ING dat ook in een bepaalde vorm. Het nut daarvan lijkt me beperkter omdat kernsystemen gelimiteerd zijn in functionaliteit, minder aan verandering onderhevig zijn, stabiliteit een essentieel onderdeel is, en gebruikers vooral interne computersystemen zijn. • Als er niks te ontwikkelen is, hoef je ook niet agile te ontwikkelen natuurlijk. • Je lijkt het idee van agile, CI/CD niet helemaal te snappen. Het idee is juist dat dit soort problemen eerder opgepakt worden. Stel dit is inderdaad door een nieuwe change geweest en ze hadden op de oude manier de software ontwikkeld. Dan hadden ze dit misschien wel een jaar geleden al geïntroduceerd en vandaag komen ze daar dan achter. Vervolgens moet het gehele release proces wat weken, maanden kan duren weer doorlopen worden om de fix hiervoor weer door te voeren. is het vervelend? Ja. Is het vervelender als je er een jaar na het doorvoeren van de change pas achter komt dat dit in productie voorkomt? Zeker. Maar daarnaast, dit soort processen in de achtergrond, het doorlopen van transacties, die worden veelal nog in super oude systemen gedaan die nog vast zitten in kwart-jaarlijkse release schema's dus dit komt misschien wel helemaal niet door een change in software. Ik kan me zelfs voorstellen dat hier gewoon nog een handmatig proces aan te pas komt, en dat een mens per ongeluk dezelfde batch 2 keer gedraaid heeft. • Als testen zoals boven beschreven maanden werk is, veranderd de manier van werken dat helemaal niets aan.